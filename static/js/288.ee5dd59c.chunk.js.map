{"version":3,"file":"static/js/288.ee5dd59c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"conteiner\":\"MovieDetails_conteiner__Bj5za\",\"img\":\"MovieDetails_img__D3WH9\",\"title\":\"MovieDetails_title__RBndM\",\"score\":\"MovieDetails_score__67zDg\",\"overview\":\"MovieDetails_overview__EVogb\",\"text\":\"MovieDetails_text__uG5Tv\",\"Genres\":\"MovieDetails_Genres__rEGSS\",\"list\":\"MovieDetails_list__y5Rs9\"};","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, useLocation, Link, Outlet } from 'react-router-dom';\nimport axios from 'axios';\nimport { nanoid } from 'nanoid';\nimport noimageposter from '../../image/noimageposter.jfif'\n\n\nimport css from './MovieDetails.module.css';\n\nfunction MovieDetails() {\n  const { movieid } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n  const [movies, setMovies] = useState([]);\n  const API_KEY = 'af4a5cbddac880a4b4c654ac364f51a9';\n  \n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      url: `https://api.themoviedb.org/3/movie/${movieid}?api_key=${API_KEY}`,\n      params: { language: 'en-US' },\n      headers: {\n        accept: 'application/json',\n      },\n    };\n\n    axios\n      .request(options)\n      .then(function (response) {\n        setMovies(response.data);\n      })\n      \n      .catch(function (error) {\n        console.error(error);\n      });\n    \n  }, [movieid]);\n\n  const genresd = movies.genres?.map(genre => genre.name);\n  const { original_title, popularity, overview, poster_path } = movies;\n  return (     \n        <div>\n          <Link to={backLinkHref}>Go back</Link>\n        <div className={css.conteiner}>\n          {poster_path !== undefined ? (\n            <img\n              height={300}\n              width={200}\n              className={css.img}\n              src={`https://image.tmdb.org/t/p/w200/${poster_path}`}\n              alt={original_title}\n            />) : (\n            <img\n              src={noimageposter}\n              alt={original_title}\n            />)}\n            <div>\n              <h2 className={css.title}>{original_title}</h2>\n              <p className={css.score}>User score:{popularity}</p>\n              <h3 className={css.overview}>Overview</h3>\n              <p className={css.text}>{overview}</p>\n              <h3 className={css.Genres}>Genres</h3>\n              <ul className={css.list}>\n                {genresd?.map(genres => {\n                  return <li key={nanoid()}>{genres}</li>;\n                })}\n              </ul>\n            </div>\n          </div>\n          <ul>\n            <h4>Additional information </h4>\n            <li>\n              <Link to=\"cast\" state={location.state}>\n                cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={location.state}>\n                reviews\n              </Link>\n            </li>\n          </ul>\n          <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n  );\n}\n\nexport default MovieDetails;\n\n//-------------------------------------------------------\n\n  ","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["_location$state$from","_location$state","_movies$genres","movieid","useParams","location","useLocation","backLinkHref","state","from","_useState","useState","_useState2","_slicedToArray","movies","setMovies","useEffect","options","method","url","concat","params","language","headers","accept","axios","then","response","data","catch","error","console","genresd","genres","map","genre","name","original_title","popularity","overview","poster_path","_jsxs","children","_jsx","Link","to","className","css","undefined","height","width","src","alt","noimageposter","size","arguments","length","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","Suspense","fallback","Outlet"],"sourceRoot":""}